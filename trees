library(ISLR)
library(tree) 
#install.packages('randomForest')
library(randomForest)
#source("http://bioconductor.org/biocLite.R")
#biocLite("illuminaHumanv4.db")
library(illuminaHumanv4.db)
library(GEOquery)
citation("GEOquery")

gse <- getGEO("GSE47598", GSEMatrix = FALSE) 

gsmplatforms <- lapply(GSMList(gse),function(x) {Meta(x)$platform_id})
head(gsmplatforms)
gsmlist = Filter(function(gsm) {Meta(gsm)$platform_id=='GPL10558'},GSMList(gse))
PvalTable <- Table(gsmlist[[1]])
Columns(gsmlist[[1]])[1:5,]
probesets <- Table(GPLList(gse)[[1]])$ID
data.matrix <- do.call('cbind',lapply(gsmlist,function(x) 
{tab <- Table(x)
mymatch <- match(probesets,tab$ID_REF)
return(tab$VALUE[mymatch])
}))

data.labels <- lapply(GSMList(gse),function(x) {Meta(x)$characteristics_ch1}) == "group: Psoriasis Patient"

gse <- getGEO("GSE47598", GSEMatrix = TRUE) 

if (length(gse) > 1) idx <- grep("GPL10558", attr(gse, "names")) else idx <- 1
gse <- gse[[idx]]

show(gse)

#Convert the GSE list into a matrix (and traspose so rows are individuals (sample) and columns are genes (features).
eset <- t(exprs(gse))

dataset3 <- data.frame(eset)
y <- data.labels

# Runs over subsets of data to find the most important factors

set.seed(1000)

importFactors.append = FALSE
fac.append = 0

for (i in 0:46){
  start = 1+i*1000
  end = 1000+i*1000
  dataset7 <- dataset3[,start:end]
  forestfit <- randomForest(y~., data=dataset7, importance=TRUE, ntree=10000)
  varImpPlot(forestfit)
  importTree <- importance(forestfit, type=1)
  importTree2 <- importTree*importTree
  importFactors = apply(importTree2, 1, function(row) all(row > 10))
  fac <- importTree[importFactors,]
  fac <- fac[order(fac)]
  symbols <- mapIds(illuminaHumanv4.db, names(fac), "SYMBOL","PROBEID")
  symbols
  fac.append = append(fac.append,fac)
  importFactors.append = append(importFactors.append,importFactors)
  
}


dataset7 <- dataset3[,47001:47222]
forestfit <- randomForest(y~., data=dataset7, importance=TRUE, ntree=10000)
varImpPlot(forestfit)
importTree <- importance(forestfit, type=1)
importTree2 <- importTree*importTree
importFactors = apply(importTree2, 1, function(row) all(row > 10))
fac <- importTree[importFactors,]
fac <- fac[order(fac)]
symbols <- mapIds(illuminaHumanv4.db, names(fac), "SYMBOL","PROBEID")
symbols
fac.append = append(fac.append,fac)
importFactors.append = append(importFactors.append,importFactors)

# cut off the extra factor added to initialize
importFactors.append = importFactors.append[2:length(importFactors.append)]

# find the best of the best
dataset8 <- dataset3[,importFactors.append]
forestfit <- randomForest(y~., data=dataset8, importance=TRUE, ntree=10000)
varImpPlot(forestfit)
importTree <- importance(forestfit, type=1)
importTree2 <- importTree*importTree
importFactors = apply(importTree2, 1, function(row) all(row > 6))
fac <- importTree[importFactors,]
fac <- fac[order(fac)]
symbols <- mapIds(illuminaHumanv4.db, names(fac), "SYMBOL","PROBEID")
symbols
fac

